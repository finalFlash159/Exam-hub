name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: exam-app/package-lock.json
        
    - name: Setup Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install Frontend Dependencies
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm ci
        
    - name: Install Backend Dependencies
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: Frontend Unit Tests
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm test -- --coverage --watchAll=false
        
    - name: Backend Unit Tests
      if: matrix.component == 'backend'
      run: |
        cd backend
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Frontend Linting
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm run lint
        
    - name: Backend Linting
      if: matrix.component == 'backend'
      run: |
        cd backend
        flake8 . --max-line-length=88 --ignore=E203,W503
        black --check .
        isort --check-only .
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.component == 'backend'
      with:
        file: backend/coverage.xml
        
  # Job 2: Code Quality & Security
  quality-security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for SonarQube
        
    - name: SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: SAST with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'exam-hub'
        path: '.'
        format: 'ALL'
        
    - name: Upload OWASP Results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
        
  # Job 3: Build Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, quality-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        
    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./exam-app
        file: ./exam-app/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Job 4: Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Artillery
      run: npm install -g artillery@latest
      
    - name: Run Load Tests
      run: |
        artillery run tests/performance/load-test.yml --output report.json
        artillery report report.json --output report.html
        
    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: report.html
        
  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Terraform Init
      run: |
        cd terraform/staging
        terraform init
        
    - name: Terraform Plan
      run: |
        cd terraform/staging
        terraform plan -out=tfplan
        
    - name: Terraform Apply
      run: |
        cd terraform/staging
        terraform apply tfplan
        
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl set image deployment/exam-hub-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        kubectl set image deployment/exam-hub-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        kubectl rollout status deployment/exam-hub-frontend
        kubectl rollout status deployment/exam-hub-backend
        
  # Job 6: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Blue-Green Deployment
      run: |
        cd terraform/production
        terraform init
        # Switch traffic to new version
        terraform apply -var="deploy_version=${{ github.sha }}" -auto-approve
        
    - name: Health Check
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Check health endpoint
        curl -f https://exam-hub-prod.example.com/health || exit 1
        
    - name: Rollback on Failure
      if: failure()
      run: |
        cd terraform/production
        terraform apply -var="deploy_version=${{ github.event.before }}" -auto-approve 