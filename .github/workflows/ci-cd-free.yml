name: CI/CD Pipeline (Free Tier)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Testing (gi·ªØ nguy√™n)
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: exam-app/package-lock.json
        
    - name: Setup Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install Frontend Dependencies
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm ci
        
    - name: Install Backend Dependencies
      if: matrix.component == 'backend'
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: Frontend Unit Tests
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm test -- --coverage --watchAll=false
        
    - name: Backend Unit Tests
      if: matrix.component == 'backend'
      run: |
        cd backend
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Frontend Linting
      if: matrix.component == 'frontend'
      run: |
        cd exam-app
        npm run lint
        
    - name: Backend Linting
      if: matrix.component == 'backend'
      run: |
        cd backend
        flake8 . --max-line-length=88 --ignore=E203,W503
        black --check .
        isort --check-only .
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.component == 'backend'
      with:
        file: backend/coverage.xml

  # Job 2: Code Quality & Security (mi·ªÖn ph√≠)
  quality-security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    # SonarCloud (mi·ªÖn ph√≠ cho open source)
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    # CodeQL (mi·ªÖn ph√≠)
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    # Snyk (mi·ªÖn ph√≠ cho open source)
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  # Job 3: Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Artillery
      run: npm install -g artillery@latest
      
    - name: Run Performance Tests
      run: |
        # Test v·ªõi localhost mock server
        cd exam-app
        npm start &
        sleep 30
        artillery quick --count 10 --num 5 http://localhost:3000
        
  # Job 4: Deploy Frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test, quality-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: exam-app/package-lock.json
        
    - name: Install dependencies
      run: |
        cd exam-app
        npm ci
        
    - name: Build Frontend
      run: |
        cd exam-app
        npm run build
        
    - name: Deploy to Vercel (Production)
      if: github.ref == 'refs/heads/main'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./exam-app
        vercel-args: '--prod'
        
    - name: Deploy to Vercel (Preview)
      if: github.ref == 'refs/heads/develop'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./exam-app

  # Job 5: Deploy Backend to Railway
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test, quality-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Railway (Production)
      if: github.ref == 'refs/heads/main'
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: exam-hub-backend
        
    - name: Deploy to Railway (Staging)
      if: github.ref == 'refs/heads/develop'
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        service: exam-hub-backend-staging

  # Job 6: Alternative - Deploy to Render
  deploy-render:
    runs-on: ubuntu-latest
    needs: [test, quality-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      run: |
        curl -X POST "https://api.render.com/deploy/srv-${{ secrets.RENDER_SERVICE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

  # Job 7: Deploy with Docker (mi·ªÖn ph√≠ cho small projects)
  deploy-docker:
    runs-on: ubuntu-latest
    needs: [test, quality-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./exam-app
        file: ./exam-app/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:latest
        
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest

  # Job 8: Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "Frontend: https://exam-hub.vercel.app"
        echo "Backend: https://exam-hub-backend.railway.app"
        
    - name: Notify Failure
      if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1 